{"version":3,"file":"bgwidget.min.js","sources":["../src/bgwidget.js"],"sourcesContent":["require.config({\n    paths: {\n        'jquery-ui': '/blocks/bgwidget/lib/jquery-ui-1.14.1.custom/jquery-ui-wrapper'\n    },\n    shim: {\n        'jquery-ui': {\n            deps: ['jquery'],\n            exports: 'jQuery.ui'\n        }\n    }\n});\n\ndefine('bgwidget', ['jquery', 'jquery-ui'], function($) {\n  // Encapsular variables globales en un objeto\n  var chatConfig = {\n    bot_id: null,\n    env: null,\n    api_token: null,\n    user_name: null,\n    bot_name: null,\n    api_base_url: null,\n    SUCCESS_CONECTION_MESSAGE: null,\n    CONECTION_FAILURE_MESSAGE: null,\n    SEND_MESSAGE_FAILURE_MESSAGE: null,\n    CHANNEL_ACRONYM: \"MO\",\n    tokenKey: null,\n    messagesKey: null,\n    token: \"\",\n    messages: [],\n    isPinned: true\n  };\n\n  /**\n   * Inicializa el widget de chat.\n   */\n  function initialize() {\n    setChatConfig();\n    setMessages();\n    setupWidget();\n    loadPreviousMessages();\n    if (!chatConfig.token) {\n      initializeChat();\n    }\n    setupEventListeners();\n  }\n\n  /**\n   * Configura las variables del chat.\n   */\n  function setChatConfig() {\n    chatConfig.bot_id = $(\"#chat-widget\").data(\"bot_id\");\n    chatConfig.env = $(\"#chat-widget\").data(\"env\");\n    chatConfig.api_token = $(\"#chat-widget\").data(\"api_token\");\n    chatConfig.user_name = $(\"#chat-widget\").data(\"user_name\");\n    chatConfig.bot_name = $(\"#chat-widget\").data(\"bot_name\");\n    chatConfig.api_base_url = $(\"#chat-widget\").data(\"api_base_url\");\n\n    chatConfig.SUCCESS_CONECTION_MESSAGE = M.util.get_string(\n      \"success_connection_message\",\n      \"block_bgwidget\"\n    );\n    chatConfig.CONECTION_FAILURE_MESSAGE = M.util.get_string(\n      \"connection_failure_message\",\n      \"block_bgwidget\"\n    );\n    chatConfig.SEND_MESSAGE_FAILURE_MESSAGE = M.util.get_string(\n      \"send_message_failure_message\",\n      \"block_bgwidget\"\n    );\n\n    chatConfig.tokenKey = \"chatToken_\" + chatConfig.bot_id;\n    chatConfig.messagesKey = \"chatMessages_\" + chatConfig.bot_id;\n  }\n\n  /**\n   * Configura los mensajes del chat.\n   */\n  function setMessages() {\n    chatConfig.token = sessionStorage.getItem(chatConfig.tokenKey) || \"\";\n    chatConfig.messages = JSON.parse(sessionStorage.getItem(chatConfig.messagesKey)) || [];\n  }\n\n  /**\n   * Configura el widget de chat.\n   */\n  function setupWidget() {\n    var originalSize = getOriginalSize();\n    var initialWidth = getInitialWidth(originalSize);\n    var initialHeight = getInitialHeight(originalSize);\n    setupWidgetToggle(originalSize, initialWidth, initialHeight);\n  }\n\n  /**\n   * Gets the original size of the chat widget.\n   * @returns {Object} An object containing the width and height of the widget.\n   */\n  function getOriginalSize() {\n    return {\n      width: $(\"#chat-widget\").width(),\n      height: $(\"#chat-widget\").height(),\n    };\n  }\n\n  /**\n   * Gets the initial width of the chat widget.\n   * @param {Object} originalSize - The original size of the widget.\n   * @returns {number} The initial width of the widget.\n   */\n  function getInitialWidth(originalSize) {\n    return sessionStorage.getItem(\"widgetWidth\") || originalSize.width;\n  }\n\n  /**\n   * Gets the initial height of the chat widget.\n   * @param {Object} originalSize - The original size of the widget.\n   * @returns {number} The initial height of the widget.\n   */\n  function getInitialHeight(originalSize) {\n    return sessionStorage.getItem(\"widgetHeight\") || originalSize.height;\n  }\n\n  /**\n   * Sets up the toggle functionality for the chat widget.\n   * @param {Object} originalSize - The original size of the widget.\n   * @param {number} initialWidth - The initial width of the widget.\n   * @param {number} initialHeight - The initial height of the widget.\n   */\n  function setupWidgetToggle(originalSize, initialWidth, initialHeight) {\n    $(\"#chat-move-toggle\").on(\"click\", function () {\n      chatConfig.isPinned = !chatConfig.isPinned;\n      $(\"#chat-widget\").toggleClass(\"expanded\", !chatConfig.isPinned);\n\n      if (!chatConfig.isPinned) {\n        handleUnpin(initialWidth, initialHeight);\n      } else {\n        handlePin(originalSize);\n      }\n    });\n  }\n\n  /**\n   * Handles the unpinning of the chat widget.\n   * @param {number} initialWidth - The initial width of the widget.\n   * @param {number} initialHeight - The initial height of the widget.\n   */\n  function handleUnpin(initialWidth, initialHeight) {\n    $(\"#unpinned-message\").show();\n    var savedPosition = JSON.parse(sessionStorage.getItem(\"widgetPosition\"));\n    var savedWidth = sessionStorage.getItem(\"widgetWidth\") || initialWidth;\n    var savedHeight = sessionStorage.getItem(\"widgetHeight\") || initialHeight;\n\n    if (!savedPosition) {\n      savedPosition = calculateCentralPosition(savedWidth, savedHeight);\n    }\n\n    makeWidgetDraggable();\n    makeWidgetResizable();\n\n    $(\"#chat-widget\").css({\n      position: \"fixed\",\n      width: savedWidth,\n      height: savedHeight,\n      top: savedPosition.top,\n      left: savedPosition.left,\n      maxHeight: \"90vh\"\n    });\n\n    $(\"#chat-move-toggle\").find(\"i\").removeClass(\"pinned\").addClass(\"unpinned\");\n  }\n\n  /**\n   * Handles the pinning of the chat widget.\n   * @param {Object} originalSize - The original size of the widget.\n   */\n  function handlePin(originalSize) {\n    $(\"#unpinned-message\").hide();\n    var currentWidth = $(\"#chat-widget\").width();\n    var currentHeight = $(\"#chat-widget\").height();\n\n    sessionStorage.setItem(\"widgetWidth\", currentWidth);\n    sessionStorage.setItem(\"widgetHeight\", currentHeight);\n\n    $(\"#chat-widget\").draggable(\"destroy\");\n    $(\"#chat-widget\").resizable(\"destroy\");\n    $(\"#chat-widget\").css({\n      position: \"static\",\n      width: originalSize.width,\n      height: originalSize.height,\n      maxHeight: \"45vh\"\n    });\n\n    $(\"#chat-move-toggle\").find(\"i\").removeClass(\"unpinned\").addClass(\"pinned\");\n  }\n\n  /**\n   * Calculates the central position for the chat widget.\n   * @param {number} savedWidth - The saved width of the widget.\n   * @param {number} savedHeight - The saved height of the widget.\n   * @returns {Object} An object containing the top and left position.\n   */\n  function calculateCentralPosition(savedWidth, savedHeight) {\n    var windowWidth = $(window).width();\n    var windowHeight = $(window).height();\n    return {\n      top: (windowHeight - savedHeight) / 2,\n      left: (windowWidth - savedWidth) / 2\n    };\n  }\n\n  /**\n   * Makes the chat widget draggable.\n   */\n  function makeWidgetDraggable() {\n    $(\"#chat-widget\").draggable({\n      containment: \"window\",\n      scroll: false,\n      stop: function (event, ui) {\n        sessionStorage.setItem(\"widgetPosition\", JSON.stringify(ui.position));\n      }\n    });\n  }\n\n  /**\n   * Makes the chat widget resizable.\n   */\n  function makeWidgetResizable() {\n    $(\"#chat-widget\").resizable({\n      handles: \"n, e, s, w, ne, se, sw, nw\",\n      stop: function (event, ui) {\n        sessionStorage.setItem(\"widgetWidth\", ui.size.width);\n        sessionStorage.setItem(\"widgetHeight\", ui.size.height);\n      }\n    });\n  }\n\n  /**\n   * Loads previous messages from session storage.\n   */\n  function loadPreviousMessages() {\n    if (chatConfig.messages.length > 0) {\n      chatConfig.messages.forEach(function (message) {\n        addMessage(message.sender, message.content, message.isUser);\n      });\n    }\n  }\n\n  /**\n   * Sets up event listeners for the widget.\n   */\n  function setupEventListeners() {\n    $(\"#chat-send\").on(\"click\", function () {\n      handleSendMessage();\n    });\n\n    $(\"#chat-input\").on(\"keypress\", function (e) {\n      if (e.which === 13) {\n        handleSendMessage();\n      }\n    });\n\n    $(\"#chat-reset\").on(\"click\", function () {\n      resetChat();\n    });\n\n    // Detect the drawer close event specifically for the close icon\n    $('#theme_boost-drawers-blocks').on('click', '.icon.fa-xmark', function () {\n      if (!chatConfig.isPinned) {\n        handlePin(getOriginalSize());\n        chatConfig.isPinned = true;\n      }\n    });\n  }\n\n  /**\n   * Initializes the chat by connecting to the server.\n   */\n  function initializeChat() {\n    var data = {\n      bot_id: chatConfig.bot_id,\n      env: chatConfig.env,\n      channel: chatConfig.CHANNEL_ACRONYM,\n      username: stringToHex(chatConfig.user_name),\n    };\n    sendPostRequest(\n      chatConfig.api_base_url + \"/secure/api/connect\",\n      data,\n      handleChatConnectSuccess,\n      function () {\n        showError(chatConfig.CONECTION_FAILURE_MESSAGE);\n      },\n      chatConfig.api_token\n    );\n  }\n\n  /**\n   * Handles successful chat connection.\n   * @param {Object} connectResponse - The response from the server.\n   */\n  function handleChatConnectSuccess(connectResponse) {\n    chatConfig.token = connectResponse.data[\"token\"];\n    sessionStorage.setItem(chatConfig.tokenKey, chatConfig.token);\n    var initialMessage =\n      connectResponse.data[\"initial_response\"] || chatConfig.SUCCESS_CONECTION_MESSAGE;\n    $(\"#loading-icon\").css(\"display\", \"none\");\n    addMessage(chatConfig.bot_name, initialMessage, false);\n    storeMessage(chatConfig.bot_name, initialMessage, false);\n  }\n\n  /**\n   * Handles sending a message.\n   */\n  function handleSendMessage() {\n    var userMessage = $(\"#chat-input\").val().trim();\n    if (userMessage === \"\") {\n      return;\n    }\n\n    addMessage(chatConfig.user_name, userMessage, true);\n    storeMessage(chatConfig.user_name, userMessage, true);\n\n    var data = {\n      user_input: userMessage,\n      env: chatConfig.env,\n    };\n\n    sendPostRequest(\n      chatConfig.api_base_url + \"/secure/api/message\",\n      data,\n      function (botResponse) {\n        addMessage(chatConfig.bot_name, botResponse.data.text, false);\n        storeMessage(chatConfig.bot_name, botResponse.data.text, false);\n      },\n      function () {\n        showError(chatConfig.SEND_MESSAGE_FAILURE_MESSAGE);\n      }\n    );\n\n    $(\"#chat-input\").val(\"\");\n  }\n\n  /**\n   * Resets the chat to its initial state.\n   */\n  function resetChat() {\n    $(\"#chat-messages .message\").remove();\n    $(\"#loading-icon\").css(\"display\", \"block\");\n\n    sessionStorage.removeItem(chatConfig.tokenKey);\n    sessionStorage.removeItem(chatConfig.messagesKey);\n    chatConfig.token = \"\";\n    chatConfig.messages = [];\n    initializeChat();\n  }\n\n  /**\n   * Sends a POST request to the server.\n   * @param {string} url - The URL to send the request to.\n   * @param {Object} data - The data to send in the request.\n   * @param {Function} onSuccess - Callback for successful response.\n   * @param {Function} onError - Callback for error response.\n   * @param {string} authToken - The authentication token to use for the request.\n   */\n  function sendPostRequest(url, data, onSuccess, onError, authToken) {\n    $.ajax({\n      url: url,\n      type: \"POST\",\n      contentType: \"application/json\",\n      headers: {\n        'Authorization': authToken ? 'Bearer ' + authToken : 'Bearer ' + chatConfig.token\n      },\n      data: JSON.stringify(data),\n      success: function (response) {\n        if (onSuccess) {\n          onSuccess(response);\n        }\n      },\n      error: function () {\n        if (onError) {\n          onError();\n        }\n      },\n    });\n  }\n\n  /**\n   * Adds a message to the chat interface.\n   * @param {string} sender - The sender of the message.\n   * @param {string} content - The content of the message.\n   * @param {boolean} isUser - Whether the message is from the user.\n   */\n  function addMessage(sender, content, isUser) {\n    var messageDiv = $(\"<div></div>\")\n      .addClass(\"message p-2 mb-2 rounded\")\n      .html(\"<strong>\" + sender + \":</strong> \" + content);\n\n    if (isUser) {\n      messageDiv.addClass(\"bg-primary text-white\");\n    } else {\n      messageDiv.addClass(\"bg-light text-dark\");\n    }\n\n    $(\"#chat-messages\").append(messageDiv);\n    $(\"#chat-messages\").scrollTop($(\"#chat-messages\")[0].scrollHeight);\n  }\n\n  /**\n   * Stores a message in session storage.\n   * @param {string} sender - The sender of the message.\n   * @param {string} content - The content of the message.\n   * @param {boolean} isUser - Whether the message is from the user.\n   */\n  function storeMessage(sender, content, isUser) {\n    chatConfig.messages.push({ sender: sender, content: content, isUser: isUser });\n    sessionStorage.setItem(chatConfig.messagesKey, JSON.stringify(chatConfig.messages));\n  }\n\n  /**\n   * Displays an error message in the chat.\n   * @param {string} errorMessage - The error message to display.\n   */\n  function showError(errorMessage) {\n    addMessage(chatConfig.bot_name, errorMessage, false);\n  }\n\n  /**\n   * Converts a string to its hexadecimal representation.\n   * @param {string} str - The string to convert.\n   * @returns {string} The hexadecimal representation of the string.\n   */\n  function stringToHex(str) {\n    if (!str) {\n      return \"\";\n    }\n\n    let hex = \"\";\n    for (let i = 0; i < str.length; i++) {\n      hex += str.charCodeAt(i).toString(16);\n    }\n    return hex;\n  }\n  return {\n    init: initialize,\n  };\n});\n\n\n"],"names":["require","config","paths","shim","deps","exports","define","$","chatConfig","bot_id","env","api_token","user_name","bot_name","api_base_url","SUCCESS_CONECTION_MESSAGE","CONECTION_FAILURE_MESSAGE","SEND_MESSAGE_FAILURE_MESSAGE","CHANNEL_ACRONYM","tokenKey","messagesKey","token","messages","isPinned","getOriginalSize","width","height","handlePin","originalSize","hide","currentWidth","currentHeight","sessionStorage","setItem","draggable","resizable","css","position","maxHeight","find","removeClass","addClass","initializeChat","data","channel","username","stringToHex","sendPostRequest","handleChatConnectSuccess","showError","connectResponse","initialMessage","addMessage","storeMessage","handleSendMessage","userMessage","val","trim","user_input","botResponse","text","url","onSuccess","onError","authToken","ajax","type","contentType","headers","JSON","stringify","success","response","error","sender","content","isUser","messageDiv","html","append","scrollTop","scrollHeight","push","errorMessage","str","hex","i","length","charCodeAt","toString","init","initialWidth","initialHeight","M","util","get_string","getItem","parse","getInitialWidth","getInitialHeight","on","toggleClass","show","savedPosition","savedWidth","savedHeight","windowWidth","window","top","left","calculateCentralPosition","containment","scroll","stop","event","ui","handles","size","handleUnpin","setupWidgetToggle","forEach","message","e","which","remove","removeItem"],"mappings":"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"}