{"version":3,"file":"bgwidget.min.js","sources":["../src/bgwidget.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n/**\n * Description of what this file does.\n *\n * @category    module\n * @copyright   2024 Franco Muzzio <franco.muzzio@botgenes.com>\n * @license     https://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n/* global module */\n\n/**\n * Initializes the bgwidget module.\n * @param {Object} root - The root object, typically `window` or `self`.\n * @param {Function} factory - The factory function to create the module.\n */\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define(['jquery', 'jqueryui'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    module.exports = factory(require('jquery'), require('jquery-ui-dist'));\n  } else {\n    root.bgwidget = factory(root.jQuery);\n  }\n}(typeof self !== 'undefined' ? self : this, function ($) {\n  /**\n   * Initializes the chat widget.\n   */\n  function initialize() {\n    var bot_id = $(\"#chat-widget\").data(\"bot_id\");\n    var env = $(\"#chat-widget\").data(\"env\");\n    var api_token = $(\"#chat-widget\").data(\"api_token\");\n    var user_name = $(\"#chat-widget\").data(\"user_name\");\n    var bot_name = $(\"#chat-widget\").data(\"bot_name\");\n    var api_base_url = $(\"#chat-widget\").data(\"api_base_url\");\n\n    const SUCCESS_CONECTION_MESSAGE = M.util.get_string(\n      \"success_connection_message\",\n      \"block_bgwidget\"\n    );\n    const CONECTION_FAILURE_MESSAGE = M.util.get_string(\n      \"connection_failure_message\",\n      \"block_bgwidget\"\n    );\n    const SEND_MESSAGE_FAILURE_MESSAGE = M.util.get_string(\n      \"send_message_failure_message\",\n      \"block_bgwidget\"\n    );\n    const CHANNEL_ACRONYM = \"MO\";\n\n    var tokenKey = \"chatToken_\" + bot_id;\n    var messagesKey = \"chatMessages_\" + bot_id;\n    var token = sessionStorage.getItem(tokenKey) || \"\";\n    var messages = JSON.parse(sessionStorage.getItem(messagesKey)) || [];\n    let isExpanded = false;\n\n    // Save the original size of the widget to restore it later\n    var originalSize = {\n      width: $(\"#chat-widget\").width(),\n      height: $(\"#chat-widget\").height(),\n    };\n\n    // Get the saved size or use the original size\n    var initialWidth =\n      sessionStorage.getItem(\"widgetWidth\") || originalSize.width;\n    var initialHeight =\n      sessionStorage.getItem(\"widgetHeight\") || originalSize.height;\n\n    // Make the widget draggable when expanded\n    $(\"#chat-move-toggle\").on(\"click\", function () {\n      isExpanded = !isExpanded;\n\n      // Toggle the expanded class\n      $(\"#chat-widget\").toggleClass(\"expanded\", isExpanded);\n\n      if (isExpanded) {\n        // Make it draggable if expanded\n        $(\"#chat-widget\").draggable({\n          containment: \"window\",\n          scroll: false,\n        });\n\n        // Make it resizable if expanded\n        $(\"#chat-widget\").resizable({\n          handles: \"n, e, s, w, ne, se, sw, nw\",\n          stop: function (event, ui) {\n            sessionStorage.setItem(\"widgetWidth\", ui.size.width);\n            sessionStorage.setItem(\"widgetHeight\", ui.size.height);\n          },\n        });\n\n        $(\"#chat-widget\").css({\n          position: \"fixed\",\n          width: initialWidth,\n          height: initialHeight,\n        });\n\n        $(this).find(\"i\").removeClass(\"fa-expand\").addClass(\"fa-compress\");\n      } else {\n        $(\"#chat-widget\").draggable(\"destroy\");\n        $(\"#chat-widget\").resizable(\"destroy\");\n        $(\"#chat-widget\").width(originalSize.width);\n        $(\"#chat-widget\").height(originalSize.height);\n        $(\"#chat-widget\").css({\n          position: \"static\",\n        });\n\n        $(this).find(\"i\").removeClass(\"fa-compress\").addClass(\"fa-expand\");\n      }\n    });\n\n    loadPreviousMessages();\n    if (!token) {\n      initializeChat();\n    }\n    setupEventListeners();\n\n    /**\n     * Loads previous messages from session storage.\n     */\n    function loadPreviousMessages() {\n      if (messages.length > 0) {\n        messages.forEach(function (message) {\n          addMessage(message.sender, message.content, message.isUser);\n        });\n      }\n    }\n\n    /**\n     * Sets up event listeners for chat interactions.\n     */\n    function setupEventListeners() {\n      $(\"#chat-send\").on(\"click\", function () {\n        handleSendMessage();\n      });\n\n      $(\"#chat-input\").on(\"keypress\", function (e) {\n        if (e.which === 13) {\n          handleSendMessage();\n        }\n      });\n\n      $(\"#chat-reset\").on(\"click\", function () {\n        resetChat();\n      });\n    }\n\n    /**\n     * Initializes the chat by connecting to the server.\n     */\n    function initializeChat() {\n      var data = {\n        bot_id: bot_id,\n        env: env,\n        channel: CHANNEL_ACRONYM,\n        username: stringToHex(user_name),\n      };\n      sendPostRequest(\n        api_base_url + \"/secure/api/connect\",\n        data,\n        handleChatConnectSuccess,\n        function () {\n          showError(CONECTION_FAILURE_MESSAGE);\n        },\n        api_token\n      );\n    }\n\n    /**\n     * Handles successful chat connection.\n     * @param {Object} connectResponse - The response from the server.\n     */\n    function handleChatConnectSuccess(connectResponse) {\n      token = connectResponse.data[\"token\"];\n      sessionStorage.setItem(tokenKey, token);\n      var initialMessage =\n        connectResponse.data[\"initial_response\"] || SUCCESS_CONECTION_MESSAGE;\n      $(\"#loading-icon\").css(\"display\", \"none\");\n      addMessage(bot_name, initialMessage, false);\n      storeMessage(bot_name, initialMessage, false);\n    }\n\n    /**\n     * Handles sending a message.\n     */\n    function handleSendMessage() {\n      var userMessage = $(\"#chat-input\").val().trim();\n      if (userMessage === \"\") {\n        return;\n      }\n\n      addMessage(user_name, userMessage, true);\n      storeMessage(user_name, userMessage, true);\n\n      var data = {\n        user_input: userMessage,\n        env: env,\n      };\n\n      sendPostRequest(\n        api_base_url + \"/secure/api/message\",\n        data,\n        function (botResponse) {\n          addMessage(bot_name, botResponse.data.text, false);\n          storeMessage(bot_name, botResponse.data.text, false);\n        },\n        function () {\n          showError(SEND_MESSAGE_FAILURE_MESSAGE);\n        }\n      );\n\n      $(\"#chat-input\").val(\"\");\n    }\n\n    /**\n     * Resets the chat to its initial state.\n     */\n    function resetChat() {\n      $(\"#chat-messages .message\").remove();\n      $(\"#loading-icon\").css(\"display\", \"block\");\n\n      sessionStorage.removeItem(tokenKey);\n      sessionStorage.removeItem(messagesKey);\n      token = \"\";\n      messages = [];\n      initializeChat();\n    }\n\n    /**\n     * Sends a POST request to the server.\n     * @param {string} url - The URL to send the request to.\n     * @param {Object} data - The data to send in the request.\n     * @param {Function} onSuccess - Callback for successful response.\n     * @param {Function} onError - Callback for error response.\n     * @param {string} authToken - The authentication token to use for the request.\n     */\n    function sendPostRequest(url, data, onSuccess, onError, authToken) {\n      $.ajax({\n        url: url,\n        type: \"POST\",\n        contentType: \"application/json\",\n        headers: {\n          'Authorization': authToken ? 'Bearer ' + authToken : 'Bearer ' + token\n        },\n        data: JSON.stringify(data),\n        success: function (response) {\n          if (onSuccess) {\n            onSuccess(response);\n          }\n        },\n        error: function () {\n          if (onError) {\n            onError();\n          }\n        },\n      });\n    }\n\n    /**\n     * Adds a message to the chat interface.\n     * @param {string} sender - The sender of the message.\n     * @param {string} content - The content of the message.\n     * @param {boolean} isUser - Whether the message is from the user.\n     */\n    function addMessage(sender, content, isUser) {\n      var messageDiv = $(\"<div></div>\")\n        .addClass(\"message p-2 mb-2 rounded\")\n        .html(\"<strong>\" + sender + \":</strong> \" + content);\n\n      if (isUser) {\n        messageDiv.addClass(\"bg-primary text-white\");\n      } else {\n        messageDiv.addClass(\"bg-light text-dark\");\n      }\n\n      $(\"#chat-messages\").append(messageDiv);\n      $(\"#chat-messages\").scrollTop($(\"#chat-messages\")[0].scrollHeight);\n    }\n\n    /**\n     * Stores a message in session storage.\n     * @param {string} sender - The sender of the message.\n     * @param {string} content - The content of the message.\n     * @param {boolean} isUser - Whether the message is from the user.\n     */\n    function storeMessage(sender, content, isUser) {\n      messages.push({ sender: sender, content: content, isUser: isUser });\n      sessionStorage.setItem(messagesKey, JSON.stringify(messages));\n    }\n\n    /**\n     * Displays an error message in the chat.\n     * @param {string} errorMessage - The error message to display.\n     */\n    function showError(errorMessage) {\n      addMessage(bot_name, errorMessage, false);\n    }\n\n    /**\n     * Converts a string to its hexadecimal representation.\n     * @param {string} str - The string to convert.\n     * @returns {string} The hexadecimal representation of the string.\n     */\n    function stringToHex(str) {\n      if (!str) {\n        return \"\";\n      }\n\n      let hex = \"\";\n      for (let i = 0; i < str.length; i++) {\n        hex += str.charCodeAt(i).toString(16);\n      }\n      return hex;\n    }\n  }\n\n  return {\n    init: initialize,\n  };\n}));\n"],"names":["root","factory","self","this","$","init","bot_id","data","env","api_token","user_name","bot_name","api_base_url","SUCCESS_CONECTION_MESSAGE","M","util","get_string","CONECTION_FAILURE_MESSAGE","SEND_MESSAGE_FAILURE_MESSAGE","tokenKey","messagesKey","token","sessionStorage","getItem","messages","JSON","parse","isExpanded","originalSize","width","height","initialWidth","initialHeight","initializeChat","channel","username","stringToHex","sendPostRequest","handleChatConnectSuccess","showError","connectResponse","setItem","initialMessage","css","addMessage","storeMessage","handleSendMessage","userMessage","val","trim","user_input","botResponse","text","url","onSuccess","onError","authToken","ajax","type","contentType","headers","stringify","success","response","error","sender","content","isUser","messageDiv","addClass","html","append","scrollTop","scrollHeight","push","errorMessage","str","hex","i","length","charCodeAt","toString","on","toggleClass","draggable","containment","scroll","resizable","handles","stop","event","ui","size","position","find","removeClass","forEach","message","e","which","remove","removeItem","define","amd","module","exports","require","bgwidget","jQuery"],"mappings":"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"}