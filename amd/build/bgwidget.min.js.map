{"version":3,"file":"bgwidget.min.js","sources":["../src/bgwidget.js"],"sourcesContent":["require.config({\n    paths: {\n        'jquery-ui': '/blocks/bgwidget/lib/jquery-ui-1.14.1.custom/jquery-ui-wrapper',\n        'chatConfig': '/blocks/bgwidget/amd/src/chatConfig'\n    },\n    shim: {\n        'jquery-ui': {\n            deps: ['jquery'],\n            exports: 'jQuery.ui'\n        }\n    }\n});\n\ndefine('bgwidget', ['jquery', 'jquery-ui', 'chatConfig'], function($, ui, chatConfigModule) {\n  const chatConfig = chatConfigModule.chatConfig;\n\n  /**\n   * Initializes the chat widget.\n   */\n  function initialize() {\n    chatConfigModule.setChatConfig();\n    setMessages();\n    setupWidget();\n    loadPreviousMessages();\n    if (!chatConfig.token) {\n      initializeChat();\n    }\n    setupEventListeners();\n  }\n\n  /**\n   * Sets chat messages from sessionStorage.\n   */\n  function setMessages() {\n    chatConfig.token = sessionStorage.getItem(chatConfig.tokenKey) || \"\";\n    chatConfig.messages = JSON.parse(sessionStorage.getItem(chatConfig.messagesKey)) || [];\n  }\n\n  /**\n   * Sets up the chat widget, including size and toggle functionality.\n   */\n  function setupWidget() {\n    const unpinnedWidth = getUnpinnedWidth();\n    const unpinnedHeight = getUnpinnedHeight();\n    setupWidgetToggle(unpinnedWidth, unpinnedHeight);\n  }\n\n  /**\n   * Gets the initial width of the chat widget.\n   * @returns {number} The initial width of the widget.\n   */\n  function getUnpinnedWidth() {\n    return sessionStorage.getItem(\"widgetWidth\") || chatConfig.DEFAULT_WIDGET_DIMENSIONS.WIDTH;\n  }\n\n  /**\n   * Gets the initial height of the chat widget.\n   * @returns {number} The initial height of the widget.\n   */\n  function getUnpinnedHeight() {\n    return sessionStorage.getItem(\"widgetHeight\") || chatConfig.DEFAULT_WIDGET_DIMENSIONS.HEIGHT;\n  }\n\n  /**\n   * Sets up the toggle functionality for the chat widget.\n   * @param {number} unpinnedWidth - The initial width of the widget.\n   * @param {number} unpinnedHeight - The initial height of the widget.\n   */\n  function setupWidgetToggle(unpinnedWidth, unpinnedHeight) {\n    $(\"#chat-move-toggle\").on(\"click\", function () {\n      chatConfig.isPinned = !chatConfig.isPinned;\n      if (!chatConfig.isPinned) {\n        handleUnpin(unpinnedWidth, unpinnedHeight);\n      } else {\n        handlePin();\n      }\n    });\n  }\n\n  /**\n   * Handles the unpinning of the chat widget.\n   * @param {number} unpinnedWidth - The initial width of the widget.\n   * @param {number} unpinnedHeight - The initial height of the widget.\n   */\n  function handleUnpin(unpinnedWidth, unpinnedHeight) {\n    $(\"#unpinned-message\").show();\n    let savedPosition = JSON.parse(sessionStorage.getItem(\"widgetPosition\"));\n    const savedWidth = sessionStorage.getItem(\"widgetWidth\") || unpinnedWidth;\n    const savedHeight = sessionStorage.getItem(\"widgetHeight\") || unpinnedHeight;\n\n    if (!savedPosition) {\n      savedPosition = calculateCentralPosition(savedWidth, savedHeight);\n    }\n\n    makeWidgetDraggable();\n    makeWidgetResizable();\n\n    $(\"#chat-widget\").css({\n      position: \"fixed\",\n      width: savedWidth,\n      height: savedHeight,\n      top: savedPosition.top,\n      left: savedPosition.left,\n      maxHeight: chatConfig.DEFAULT_WIDGET_DIMENSIONS.MAX_HEIGHT_UNPINNED\n    });\n\n    $(\"#chat-move-toggle\").find(\"i\").removeClass(\"pinned\").addClass(\"unpinned\");\n  }\n\n  /**\n   * Handles the pinning of the chat widget.\n   */\n  function handlePin() {\n    $(\"#unpinned-message\").hide();\n    $(\"#chat-widget\").draggable(\"destroy\");\n    $(\"#chat-widget\").resizable(\"destroy\");\n    $(\"#chat-widget\").css({\n      position: \"static\",\n      maxHeight: chatConfig.DEFAULT_WIDGET_DIMENSIONS.MAX_HEIGHT_PINNED,\n      height: \"100%\",\n      width: \"100%\",\n    });\n\n    $(\"#chat-move-toggle\").find(\"i\").removeClass(\"unpinned\").addClass(\"pinned\");\n  }\n\n  /**\n   * Calculates the central position for the chat widget.\n   * @param {number} savedWidth - The saved width of the widget.\n   * @param {number} savedHeight - The saved height of the widget.\n   * @returns {Object} An object containing the top and left position.\n   */\n  function calculateCentralPosition(savedWidth, savedHeight) {\n    const windowWidth = $(window).width();\n    const windowHeight = $(window).height();\n\n    const width = parseFloat(savedWidth) || 0;\n    const height = parseFloat(savedHeight) || 0;\n\n    return {\n        top: (windowHeight / 2) - (height / 2),\n        left: (windowWidth / 2) - (width / 2)\n    };\n  }\n\n  /**\n   * Makes the chat widget draggable.\n   */\n  function makeWidgetDraggable() {\n    $(\"#chat-widget\").draggable({\n      containment: \"window\",\n      scroll: false,\n      stop: function (event, ui) {\n        sessionStorage.setItem(\"widgetPosition\", JSON.stringify(ui.position));\n      }\n    });\n  }\n\n  /**\n   * Makes the chat widget resizable.\n   */\n  function makeWidgetResizable() {\n    $(\"#chat-widget\").resizable({\n      handles: \"n, e, s, w, ne, se, sw, nw\",\n      stop: function (event, ui) {\n        sessionStorage.setItem(\"widgetWidth\", ui.size.width);\n        sessionStorage.setItem(\"widgetHeight\", ui.size.height);\n      }\n    });\n  }\n\n  /**\n   * Loads previous chat messages from sessionStorage.\n   */\n  function loadPreviousMessages() {\n    if (chatConfig.messages.length > 0) {\n      chatConfig.messages.forEach(function (message) {\n        addMessage(message.sender, message.content, message.isUser);\n      });\n    }\n  }\n\n  /**\n   * Sets up event listeners for chat interactions.\n   */\n  function setupEventListeners() {\n    $(\"#chat-send\").on(\"click\", function () {\n      handleSendMessage();\n    });\n\n    $(\"#chat-input\").on(\"keypress\", function (e) {\n      if (e.which === 13) {\n        handleSendMessage();\n      }\n    });\n\n    $(\"#chat-reset\").on(\"click\", function () {\n      resetChat();\n    });\n\n    $('#theme_boost-drawers-blocks').on('click', '.icon.fa-xmark', function () {\n      if (!chatConfig.isPinned) {\n        handlePin();\n        chatConfig.isPinned = true;\n      }\n    });\n  }\n\n  /**\n   * Initializes the chat connection with the server.\n   */\n  function initializeChat() {\n    const data = {\n      bot_id: chatConfig.bot_id,\n      env: chatConfig.env,\n      channel: chatConfig.CHANNEL_ACRONYM,\n      username: stringToHex(chatConfig.user_name),\n    };\n    sendPostRequest(\n      chatConfig.api_base_url + \"/secure/api/connect\",\n      data,\n      handleChatConnectSuccess,\n      function () {\n        showError(chatConfig.CONECTION_FAILURE_MESSAGE);\n      },\n      chatConfig.api_token\n    );\n  }\n\n  /**\n   * Handles successful chat connection.\n   * @param {Object} connectResponse - The response from the server.\n   */\n  function handleChatConnectSuccess(connectResponse) {\n    chatConfig.token = connectResponse.data[\"token\"];\n    sessionStorage.setItem(chatConfig.tokenKey, chatConfig.token);\n    const initialMessage =\n      connectResponse.data[\"initial_response\"] || chatConfig.SUCCESS_CONECTION_MESSAGE;\n    $(\"#loading-icon\").css(\"display\", \"none\");\n    addMessage(chatConfig.bot_name, initialMessage, false);\n    storeMessage(chatConfig.bot_name, initialMessage, false);\n  }\n\n  /**\n   * Handles sending a message to the server.\n   */\n  function handleSendMessage() {\n    const userMessage = $(\"#chat-input\").val().trim();\n    if (userMessage === \"\") {\n      return;\n    }\n\n    addMessage(chatConfig.user_name, userMessage, true);\n    storeMessage(chatConfig.user_name, userMessage, true);\n\n    const data = {\n      user_input: userMessage,\n      env: chatConfig.env,\n    };\n\n    sendPostRequest(\n      chatConfig.api_base_url + \"/secure/api/message\",\n      data,\n      function (botResponse) {\n        addMessage(chatConfig.bot_name, botResponse.data.text, false);\n        storeMessage(chatConfig.bot_name, botResponse.data.text, false);\n      },\n      function () {\n        showError(chatConfig.SEND_MESSAGE_FAILURE_MESSAGE);\n      }\n    );\n\n    $(\"#chat-input\").val(\"\");\n  }\n\n  /**\n   * Resets the chat to its initial state.\n   */\n  function resetChat() {\n    $(\"#chat-messages .message\").remove();\n    $(\"#loading-icon\").css(\"display\", \"block\");\n\n    sessionStorage.removeItem(chatConfig.tokenKey);\n    sessionStorage.removeItem(chatConfig.messagesKey);\n    chatConfig.token = \"\";\n    chatConfig.messages = [];\n    initializeChat();\n  }\n\n  /**\n   * Sends a POST request to the server.\n   * @param {string} url - The URL to send the request to.\n   * @param {Object} data - The data to send in the request.\n   * @param {Function} onSuccess - Callback for successful response.\n   * @param {Function} onError - Callback for error response.\n   * @param {string} [authToken] - Optional authorization token.\n   */\n  function sendPostRequest(url, data, onSuccess, onError, authToken) {\n    $.ajax({\n      url: url,\n      type: \"POST\",\n      contentType: \"application/json\",\n      headers: {\n        'Authorization': authToken ? 'Bearer ' + authToken : 'Bearer ' + chatConfig.token\n      },\n      data: JSON.stringify(data),\n      success: function (response) {\n        if (onSuccess) {\n          onSuccess(response);\n        }\n      },\n      error: function () {\n        if (onError) {\n          onError();\n        }\n      },\n    });\n  }\n\n  /**\n   * Adds a message to the chat interface.\n   * @param {string} sender - The sender of the message.\n   * @param {string} content - The content of the message.\n   * @param {boolean} isUser - Whether the message is from the user.\n   */\n  function addMessage(sender, content, isUser) {\n    const messageDiv = $(\"<div></div>\")\n      .addClass(\"message p-2 mb-2 rounded\")\n      .html(\"<strong>\" + sender + \":</strong> \" + content);\n\n    if (isUser) {\n      messageDiv.addClass(\"bg-primary text-white\");\n    } else {\n      messageDiv.addClass(\"bg-light text-dark\");\n    }\n\n    $(\"#chat-messages\").append(messageDiv);\n    $(\"#chat-messages\").scrollTop($(\"#chat-messages\")[0].scrollHeight);\n  }\n\n  /**\n   * Stores a message in sessionStorage.\n   * @param {string} sender - The sender of the message.\n   * @param {string} content - The content of the message.\n   * @param {boolean} isUser - Whether the message is from the user.\n   */\n  function storeMessage(sender, content, isUser) {\n    chatConfig.messages.push({ sender: sender, content: content, isUser: isUser });\n    sessionStorage.setItem(chatConfig.messagesKey, JSON.stringify(chatConfig.messages));\n  }\n\n  /**\n   * Displays an error message in the chat.\n   * @param {string} errorMessage - The error message to display.\n   */\n  function showError(errorMessage) {\n    addMessage(chatConfig.bot_name, errorMessage, false);\n  }\n\n  /**\n   * Converts a string to its hexadecimal representation.\n   * @param {string} str - The string to convert.\n   * @returns {string} The hexadecimal representation of the string.\n   */\n  function stringToHex(str) {\n    if (!str) {\n      return \"\";\n    }\n\n    let hex = \"\";\n    for (let i = 0; i < str.length; i++) {\n      hex += str.charCodeAt(i).toString(16);\n    }\n    return hex;\n  }\n\n  return {\n    init: initialize,\n  };\n});\n\n\n"],"names":["require","config","paths","shim","deps","exports","define","$","ui","chatConfigModule","chatConfig","handlePin","hide","draggable","resizable","css","position","maxHeight","DEFAULT_WIDGET_DIMENSIONS","MAX_HEIGHT_PINNED","height","width","find","removeClass","addClass","initializeChat","data","bot_id","env","channel","CHANNEL_ACRONYM","username","stringToHex","user_name","sendPostRequest","api_base_url","handleChatConnectSuccess","showError","CONECTION_FAILURE_MESSAGE","api_token","connectResponse","token","sessionStorage","setItem","tokenKey","initialMessage","SUCCESS_CONECTION_MESSAGE","addMessage","bot_name","storeMessage","handleSendMessage","userMessage","val","trim","user_input","botResponse","text","SEND_MESSAGE_FAILURE_MESSAGE","url","onSuccess","onError","authToken","ajax","type","contentType","headers","JSON","stringify","success","response","error","sender","content","isUser","messageDiv","html","append","scrollTop","scrollHeight","messages","push","messagesKey","errorMessage","str","hex","i","length","charCodeAt","toString","init","setChatConfig","getItem","parse","unpinnedWidth","WIDTH","unpinnedHeight","HEIGHT","on","isPinned","show","savedPosition","savedWidth","savedHeight","windowWidth","window","windowHeight","parseFloat","top","left","calculateCentralPosition","containment","scroll","stop","event","handles","size","MAX_HEIGHT_UNPINNED","handleUnpin","setupWidgetToggle","setupWidget","forEach","message","e","which","remove","removeItem"],"mappings":"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"}