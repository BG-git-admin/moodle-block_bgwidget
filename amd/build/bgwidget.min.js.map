{"version":3,"file":"bgwidget.min.js","sources":["../src/bgwidget.js"],"sourcesContent":["require.config({\n    paths: {\n        'jquery-ui': '/blocks/bgwidget/lib/jquery-ui-1.14.1.custom/jquery-ui-wrapper'\n    },\n    shim: {\n        'jquery-ui': {\n            deps: ['jquery'],\n            exports: 'jQuery.ui'\n        }\n    }\n});\n\ndefine('bgwidget', ['jquery', 'jquery-ui'], function($) {\n  // Global variables\n  var bot_id, env, api_token, user_name, bot_name, api_base_url;\n  var SUCCESS_CONECTION_MESSAGE, CONECTION_FAILURE_MESSAGE, SEND_MESSAGE_FAILURE_MESSAGE;\n  var CHANNEL_ACRONYM = \"MO\";\n  var tokenKey, messagesKey, token, messages;\n\n  /**\n   * Initializes the chat widget.\n   */\n  function initialize() {\n    bot_id = $(\"#chat-widget\").data(\"bot_id\");\n    env = $(\"#chat-widget\").data(\"env\");\n    api_token = $(\"#chat-widget\").data(\"api_token\");\n    user_name = $(\"#chat-widget\").data(\"user_name\");\n    bot_name = $(\"#chat-widget\").data(\"bot_name\");\n    api_base_url = $(\"#chat-widget\").data(\"api_base_url\");\n\n    SUCCESS_CONECTION_MESSAGE = M.util.get_string(\n      \"success_connection_message\",\n      \"block_bgwidget\"\n    );\n    CONECTION_FAILURE_MESSAGE = M.util.get_string(\n      \"connection_failure_message\",\n      \"block_bgwidget\"\n    );\n    SEND_MESSAGE_FAILURE_MESSAGE = M.util.get_string(\n      \"send_message_failure_message\",\n      \"block_bgwidget\"\n    );\n\n    tokenKey = \"chatToken_\" + bot_id;\n    messagesKey = \"chatMessages_\" + bot_id;\n    token = sessionStorage.getItem(tokenKey) || \"\";\n    messages = JSON.parse(sessionStorage.getItem(messagesKey)) || [];\n    let isPinned = true;\n\n    var originalSize = getOriginalSize();\n    var initialWidth = getInitialWidth(originalSize);\n    var initialHeight = getInitialHeight(originalSize);\n\n    setupWidgetToggle(isPinned, originalSize, initialWidth, initialHeight);\n    loadPreviousMessages();\n    if (!token) {\n      initializeChat();\n    }\n    setupEventListeners();\n  }\n\n  /**\n   * Gets the original size of the chat widget.\n   * @returns {Object} An object containing the width and height of the widget.\n   */\n  function getOriginalSize() {\n    return {\n      width: $(\"#chat-widget\").width(),\n      height: $(\"#chat-widget\").height(),\n    };\n  }\n\n  /**\n   * Gets the initial width of the chat widget.\n   * @param {Object} originalSize - The original size of the widget.\n   * @returns {number} The initial width of the widget.\n   */\n  function getInitialWidth(originalSize) {\n    return sessionStorage.getItem(\"widgetWidth\") || originalSize.width;\n  }\n\n  /**\n   * Gets the initial height of the chat widget.\n   * @param {Object} originalSize - The original size of the widget.\n   * @returns {number} The initial height of the widget.\n   */\n  function getInitialHeight(originalSize) {\n    return sessionStorage.getItem(\"widgetHeight\") || originalSize.height;\n  }\n\n  /**\n   * Sets up the toggle functionality for the chat widget.\n   * @param {boolean} isPinned - Indicates if the widget is pinned.\n   * @param {Object} originalSize - The original size of the widget.\n   * @param {number} initialWidth - The initial width of the widget.\n   * @param {number} initialHeight - The initial height of the widget.\n   */\n  function setupWidgetToggle(isPinned, originalSize, initialWidth, initialHeight) {\n    $(\"#chat-move-toggle\").on(\"click\", function () {\n      isPinned = !isPinned;\n      $(\"#chat-widget\").toggleClass(\"expanded\", !isPinned);\n\n      if (!isPinned) {\n        handleUnpin(initialWidth, initialHeight);\n      } else {\n        handlePin(originalSize);\n      }\n    });\n  }\n\n  /**\n   * Handles the unpinning of the chat widget.\n   * @param {number} initialWidth - The initial width of the widget.\n   * @param {number} initialHeight - The initial height of the widget.\n   */\n  function handleUnpin(initialWidth, initialHeight) {\n    $(\"#unpinned-message\").show();\n    var savedPosition = JSON.parse(sessionStorage.getItem(\"widgetPosition\"));\n    var savedWidth = sessionStorage.getItem(\"widgetWidth\") || initialWidth;\n    var savedHeight = sessionStorage.getItem(\"widgetHeight\") || initialHeight;\n\n    if (!savedPosition) {\n      savedPosition = calculateCentralPosition(savedWidth, savedHeight);\n    }\n\n    makeWidgetDraggable();\n    makeWidgetResizable();\n\n    $(\"#chat-widget\").css({\n      position: \"fixed\",\n      width: savedWidth,\n      height: savedHeight,\n      top: savedPosition.top,\n      left: savedPosition.left,\n      maxHeight: \"90vh\"\n    });\n\n    $(\"#chat-move-toggle\").find(\"i\").removeClass(\"pinned\").addClass(\"unpinned\");\n  }\n\n  /**\n   * Handles the pinning of the chat widget.\n   * @param {Object} originalSize - The original size of the widget.\n   */\n  function handlePin(originalSize) {\n    $(\"#unpinned-message\").hide();\n    var currentWidth = $(\"#chat-widget\").width();\n    var currentHeight = $(\"#chat-widget\").height();\n\n    sessionStorage.setItem(\"widgetWidth\", currentWidth);\n    sessionStorage.setItem(\"widgetHeight\", currentHeight);\n\n    $(\"#chat-widget\").draggable(\"destroy\");\n    $(\"#chat-widget\").resizable(\"destroy\");\n    $(\"#chat-widget\").css({\n      position: \"static\",\n      width: originalSize.width,\n      height: originalSize.height,\n      maxHeight: \"45vh\"\n    });\n\n    $(\"#chat-move-toggle\").find(\"i\").removeClass(\"unpinned\").addClass(\"pinned\");\n  }\n\n  /**\n   * Calculates the central position for the chat widget.\n   * @param {number} savedWidth - The saved width of the widget.\n   * @param {number} savedHeight - The saved height of the widget.\n   * @returns {Object} An object containing the top and left position.\n   */\n  function calculateCentralPosition(savedWidth, savedHeight) {\n    var windowWidth = $(window).width();\n    var windowHeight = $(window).height();\n    return {\n      top: (windowHeight - savedHeight) / 2,\n      left: (windowWidth - savedWidth) / 2\n    };\n  }\n\n  /**\n   * Makes the chat widget draggable.\n   */\n  function makeWidgetDraggable() {\n    $(\"#chat-widget\").draggable({\n      containment: \"window\",\n      scroll: false,\n      stop: function (event, ui) {\n        sessionStorage.setItem(\"widgetPosition\", JSON.stringify(ui.position));\n      }\n    });\n  }\n\n  /**\n   * Makes the chat widget resizable.\n   */\n  function makeWidgetResizable() {\n    $(\"#chat-widget\").resizable({\n      handles: \"n, e, s, w, ne, se, sw, nw\",\n      stop: function (event, ui) {\n        sessionStorage.setItem(\"widgetWidth\", ui.size.width);\n        sessionStorage.setItem(\"widgetHeight\", ui.size.height);\n      }\n    });\n  }\n\n  /**\n   * Loads previous messages from session storage.\n   */\n  function loadPreviousMessages() {\n    if (messages.length > 0) {\n      messages.forEach(function (message) {\n        addMessage(message.sender, message.content, message.isUser);\n      });\n    }\n  }\n\n  /**\n   * Sets up event listeners for chat interactions.\n   */\n  function setupEventListeners() {\n    $(\"#chat-send\").on(\"click\", function () {\n      handleSendMessage();\n    });\n\n    $(\"#chat-input\").on(\"keypress\", function (e) {\n      if (e.which === 13) {\n        handleSendMessage();\n      }\n    });\n\n    $(\"#chat-reset\").on(\"click\", function () {\n      resetChat();\n    });\n  }\n\n  /**\n   * Initializes the chat by connecting to the server.\n   */\n  function initializeChat() {\n    var data = {\n      bot_id: bot_id,\n      env: env,\n      channel: CHANNEL_ACRONYM,\n      username: stringToHex(user_name),\n    };\n    sendPostRequest(\n      api_base_url + \"/secure/api/connect\",\n      data,\n      handleChatConnectSuccess,\n      function () {\n        showError(CONECTION_FAILURE_MESSAGE);\n      },\n      api_token\n    );\n  }\n\n  /**\n   * Handles successful chat connection.\n   * @param {Object} connectResponse - The response from the server.\n   */\n  function handleChatConnectSuccess(connectResponse) {\n    token = connectResponse.data[\"token\"];\n    sessionStorage.setItem(tokenKey, token);\n    var initialMessage =\n      connectResponse.data[\"initial_response\"] || SUCCESS_CONECTION_MESSAGE;\n    $(\"#loading-icon\").css(\"display\", \"none\");\n    addMessage(bot_name, initialMessage, false);\n    storeMessage(bot_name, initialMessage, false);\n  }\n\n  /**\n   * Handles sending a message.\n   */\n  function handleSendMessage() {\n    var userMessage = $(\"#chat-input\").val().trim();\n    if (userMessage === \"\") {\n      return;\n    }\n\n    addMessage(user_name, userMessage, true);\n    storeMessage(user_name, userMessage, true);\n\n    var data = {\n      user_input: userMessage,\n      env: env,\n    };\n\n    sendPostRequest(\n      api_base_url + \"/secure/api/message\",\n      data,\n      function (botResponse) {\n        addMessage(bot_name, botResponse.data.text, false);\n        storeMessage(bot_name, botResponse.data.text, false);\n      },\n      function () {\n        showError(SEND_MESSAGE_FAILURE_MESSAGE);\n      }\n    );\n\n    $(\"#chat-input\").val(\"\");\n  }\n\n  /**\n   * Resets the chat to its initial state.\n   */\n  function resetChat() {\n    $(\"#chat-messages .message\").remove();\n    $(\"#loading-icon\").css(\"display\", \"block\");\n\n    sessionStorage.removeItem(tokenKey);\n    sessionStorage.removeItem(messagesKey);\n    token = \"\";\n    messages = [];\n    initializeChat();\n  }\n\n  /**\n   * Sends a POST request to the server.\n   * @param {string} url - The URL to send the request to.\n   * @param {Object} data - The data to send in the request.\n   * @param {Function} onSuccess - Callback for successful response.\n   * @param {Function} onError - Callback for error response.\n   * @param {string} authToken - The authentication token to use for the request.\n   */\n  function sendPostRequest(url, data, onSuccess, onError, authToken) {\n    $.ajax({\n      url: url,\n      type: \"POST\",\n      contentType: \"application/json\",\n      headers: {\n        'Authorization': authToken ? 'Bearer ' + authToken : 'Bearer ' + token\n      },\n      data: JSON.stringify(data),\n      success: function (response) {\n        if (onSuccess) {\n          onSuccess(response);\n        }\n      },\n      error: function () {\n        if (onError) {\n          onError();\n        }\n      },\n    });\n  }\n\n  /**\n   * Adds a message to the chat interface.\n   * @param {string} sender - The sender of the message.\n   * @param {string} content - The content of the message.\n   * @param {boolean} isUser - Whether the message is from the user.\n   */\n  function addMessage(sender, content, isUser) {\n    var messageDiv = $(\"<div></div>\")\n      .addClass(\"message p-2 mb-2 rounded\")\n      .html(\"<strong>\" + sender + \":</strong> \" + content);\n\n    if (isUser) {\n      messageDiv.addClass(\"bg-primary text-white\");\n    } else {\n      messageDiv.addClass(\"bg-light text-dark\");\n    }\n\n    $(\"#chat-messages\").append(messageDiv);\n    $(\"#chat-messages\").scrollTop($(\"#chat-messages\")[0].scrollHeight);\n  }\n\n  /**\n   * Stores a message in session storage.\n   * @param {string} sender - The sender of the message.\n   * @param {string} content - The content of the message.\n   * @param {boolean} isUser - Whether the message is from the user.\n   */\n  function storeMessage(sender, content, isUser) {\n    messages.push({ sender: sender, content: content, isUser: isUser });\n    sessionStorage.setItem(messagesKey, JSON.stringify(messages));\n  }\n\n  /**\n   * Displays an error message in the chat.\n   * @param {string} errorMessage - The error message to display.\n   */\n  function showError(errorMessage) {\n    addMessage(bot_name, errorMessage, false);\n  }\n\n  /**\n   * Converts a string to its hexadecimal representation.\n   * @param {string} str - The string to convert.\n   * @returns {string} The hexadecimal representation of the string.\n   */\n  function stringToHex(str) {\n    if (!str) {\n      return \"\";\n    }\n\n    let hex = \"\";\n    for (let i = 0; i < str.length; i++) {\n      hex += str.charCodeAt(i).toString(16);\n    }\n    return hex;\n  }\n\n  $(document).ready(function() {\n      $(\"#element\").tooltip(); // Initialize the tooltip\n  });\n\n  return {\n    init: initialize,\n  };\n});\n\n\n"],"names":["require","config","paths","shim","deps","exports","define","$","bot_id","env","api_token","user_name","bot_name","api_base_url","SUCCESS_CONECTION_MESSAGE","CONECTION_FAILURE_MESSAGE","SEND_MESSAGE_FAILURE_MESSAGE","tokenKey","messagesKey","token","messages","initializeChat","data","channel","username","stringToHex","sendPostRequest","handleChatConnectSuccess","showError","connectResponse","sessionStorage","setItem","initialMessage","css","addMessage","storeMessage","handleSendMessage","userMessage","val","trim","user_input","botResponse","text","url","onSuccess","onError","authToken","ajax","type","contentType","headers","JSON","stringify","success","response","error","sender","content","isUser","messageDiv","addClass","html","append","scrollTop","scrollHeight","push","errorMessage","str","hex","i","length","charCodeAt","toString","document","ready","tooltip","init","M","util","get_string","getItem","parse","originalSize","width","height","initialWidth","getInitialWidth","initialHeight","getInitialHeight","isPinned","on","toggleClass","hide","currentWidth","currentHeight","draggable","resizable","position","maxHeight","find","removeClass","handlePin","show","savedPosition","savedWidth","savedHeight","windowWidth","window","top","left","calculateCentralPosition","containment","scroll","stop","event","ui","handles","size","handleUnpin","setupWidgetToggle","forEach","message","e","which","remove","removeItem"],"mappings":"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"}